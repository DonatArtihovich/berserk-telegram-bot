import { Rooms, IRoom, IUser } from './rooms.types'
import { Context } from 'telegraf'
import { IMessage } from '../types'
// import {requireDecks}

export const rooms: Rooms = []

export class Room implements IRoom {
    public name: string
    public status: boolean
    public players: IUser[]
    public watchers: IUser[]
    public isOnGame: boolean
    public field?: string[][]
    constructor(name: string, player: IUser) {
        this.name = name
        this.status = false
        this.players = [player]
        this.watchers = []
        this.isOnGame = false
    }

    public informRoom(ctx: Context, key: string, user: IUser): void {
        const informedUsers = !key.startsWith('gen_') ? this.players.concat(this.watchers).filter(u => u.id !== user.id) : this.players.concat(this.watchers)
        const message = ctx.message as IMessage
        if (key === 'msg' && message.text.length > 2392) {
            ctx.reply('üö´–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!')
            return
        }

        let alert: string;
        switch (key) {
            case 'pjoin':
                alert = `üòÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${user.name}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∫–∞–∫ –∏–≥—Ä–æ–∫.`
                break;
            case 'wjoin':
                alert = `ü•∏ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${user.name}</b> –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ –∫–∞–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å.`
                break;
            case 'exit':
                alert = `üò¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${user.name}</b> –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É.`
                break;
            case 'deck':
                alert = `üÉè –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>${user.name}</b> –≤—ã–±—Ä–∞–ª –∫–æ–ª–æ–¥—É –¥–ª—è –∏–≥—Ä—ã.`
                break;
            case 'gen_start':
                alert = '‚úÖ–ö–æ–ª–æ–¥—ã –≤—ã–±—Ä–∞–Ω—ã! –ù–∞–±–∏—Ä–∞–π—Ç–µ –æ—Ç—Ä—è–¥—ã.'
                break;
            case 'msg':
                alert = `üó£<b>${user.name}</b>: ${message.text}`
        }

        informedUsers.forEach(user => {
            ctx.telegram.sendMessage(user.id, alert, { parse_mode: 'HTML' })
        })
    }
}

export class User implements IUser {
    public id: number
    public name: string

    constructor(id: number, name: string) {
        this.id = id
        this.name = name
    }
}