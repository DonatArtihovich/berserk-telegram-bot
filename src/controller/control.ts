import { Context } from 'telegraf'
import { IController } from './control.types'
import { rooms, Room, User } from '../rooms/rooms'
import { IRoom, IUser } from '../rooms/rooms.types'

export default class Controller implements IController {
    public createRoom(ctx: Context): void {
        if (!ctx) throw new Error('ctx is not defined!')
        const userId = ctx.from?.id as number

        const curRoom: IRoom | undefined = findRoomForUser(userId)
        if (curRoom !== undefined) {
            ctx.replyWithHTML(`üö´–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ <b>${curRoom.name}</b>!`)
            return
        }

        const userName = ctx.from?.first_name as string
        const roomName: string = generateRandomRoomName()
        const player: IUser = new User(userId, userName)
        const newRoom: IRoom = new Room(roomName, player)

        rooms.push(newRoom)
        ctx.replyWithHTML(`‚úÖ–ö–æ–º–Ω–∞—Ç–∞ –ø–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–µ–º <code>${roomName}</code> —Å–æ–∑–¥–∞–Ω–∞! –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Å—é–¥–∞ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∏ –∑—Ä–∏—Ç–µ–ª–µ–π!\n\nüòÄ<i>–û–ø–ø–æ–Ω–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ <code>/join ${roomName}</code>, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–∞–∫ –∏–≥—Ä–æ–∫,\nü•∏–∑—Ä–∏—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ <code>/watch ${roomName}</code>, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫–∞–∫ –∑—Ä–∏—Ç–µ–ª—å</i>`)
        console.log(rooms, rooms[0].players)
    }

    public joinRoom(ctx: Context, roomName: string, watcher = false): void {
        const room = rooms.find(r => r.name === roomName.trim())
        const userId = ctx.from?.id as number

        const curRoom: IRoom | undefined = findRoomForUser(userId)
        if (curRoom !== undefined) {
            ctx.replyWithHTML(`üö´–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ <b>${curRoom.name}</b>!`)
            return
        }

        const userName = ctx.from?.first_name as string
        if (room?.players.findIndex(p => p.id === userId) !== -1) {
            ctx.reply(`üö´–ö–æ–º–Ω–∞—Ç—ã ${roomName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`)
            return
        }

        const user: IUser = new User(userId, userName)
        if (room.players.length < 2 && !watcher) {
            room.players.push(user)
            ctx.replyWithHTML(`üòÄ–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É <b>${room.name}</b> –∫–∞–∫ –∏–≥—Ä–æ–∫! –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!`)
            room.informRoom(ctx, 'pjoin', user)
            console.log(room)
        } else {
            room.watchers.push(user)
            ctx.replyWithHTML(`ü•∏–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–Ω–∞—Ç—É <b>${room.name}</b> –∫–∞–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å.`)
            room.informRoom(ctx, 'wjoin', user)
            console.log(room)
        }
    }

    public leaveRoom(ctx: Context): void {
        const userId = ctx.from?.id as number
        const curRoom: IRoom | undefined = findRoomForUser(userId)

        if (curRoom === undefined) {
            ctx.reply('üö´–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.üòê')
        } else {
            const userStatusArr = curRoom.players.findIndex(u => u.id === userId) !== -1 ? curRoom.players : curRoom.watchers as IUser[]
            const userIndex = userStatusArr.findIndex(u => u.id === userId)

            curRoom.informRoom(ctx, 'exit', userStatusArr[userIndex])
            userStatusArr.splice(userIndex)
            ctx.replyWithHTML(`‚úÖ–≤—ã –ø–æ–∫–∏–Ω—É–ª–∏ –∫–æ–º–Ω–∞—Ç—É <b>${curRoom.name}</b>üò¢`)
            console.log(userStatusArr, userIndex, userStatusArr[userIndex])
        }
    }

    public showRoom(ctx: Context): void {
        const userId = ctx.from?.id as number
        const curRoom: IRoom | undefined = findRoomForUser(userId)

        if (curRoom === undefined) {
            ctx.reply('üö´–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ–º–Ω–∞—Ç–µ.üòê')
        } else {
            const playersInRoom = curRoom.players.map(p => p.name)
            const watchersInRoom = curRoom.watchers.map(w => w.name)
            const players = playersInRoom.length ? `üòÄ${playersInRoom.join('\nüòÄ')}` : 'üö´<i>–ò–≥—Ä–æ–∫–æ–≤ –Ω–µ—Ç</i>üö´'
            const watchers = watchersInRoom.length ? `ü•∏${watchersInRoom.join('\nü•∏')}` : 'üö´<i>–ù–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –Ω–µ—Ç</i>üö´'
            const isOnGame = curRoom.status ? '‚úÖ–ò–≥—Ä–∞ –∏–¥–µ—Ç‚úÖ' : 'üö´–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å / —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—åüö´'

            const message = `üì∞<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–Ω–∞—Ç–µ</b> <code>${curRoom.name}</code>\nüóû<b>–í–ª–∞–¥–µ–ª–µ—Ü</b> - ${playersInRoom[0]}\n\n<b>–ò–≥—Ä–æ–∫–∏:</b>\n${players}\n\n<b>–ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏:</b>\n${watchers}\n\n<b>–°—Ç–∞—Ç—É—Å –∏–≥—Ä—ã:</b> ${isOnGame}`
            ctx.replyWithHTML(message)
        }
    }

    public showAllRooms(ctx: Context): void {
        const roomNames = rooms.map(room => `<code>${room.name}</code>`)
        const message = `üì∞<b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç:</b>\n\nüóû${roomNames.join('\nüóû')}`
        ctx.replyWithHTML(message)
    }

    public sendMessage(ctx: Context, command: string): void {
        if (command[0] === '/') {
            ctx.reply('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')
            return
        }
        const userId = ctx.from?.id as number
        const userName = ctx.from?.first_name as string
        const curRoom: IRoom | undefined = findRoomForUser(userId)
        if (curRoom !== undefined) {
            curRoom.informRoom(ctx, 'msg', new User(userId, userName))
        }
    }
}

function generateRandomRoomName(): string {
    const alph = 'abcdefghigklmnopqrstuvwxuzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
    let subStr = ''

    while (subStr.length <= 10) {
        const idx = Math.floor(Math.random() * (alph.length - 1))
        const letter = alph[idx]

        subStr += letter
    }
    return `room${subStr}`
}

function findRoomForUser(userId: number): IRoom | undefined {
    const curRoom: IRoom | undefined = rooms.find(r =>
        r.players.find(p => p.id === userId) !== undefined
        || r.watchers?.find(w => w.id === userId) !== undefined)

    return curRoom
}